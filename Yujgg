import java.io.*;
import java.util.Properties;

public class RunConfigModifier {

    public static void updateRunConfig(String[] args, String key, String newValue) {
        try {
            // Retrieve the runtime config file path dynamically
            String configFilePath = Runenvironment.getRunconfigfilename(args);
            File configFile = new File(configFilePath);

            if (!configFile.exists()) {
                System.err.println("Config file not found: " + configFilePath);
                return;
            }

            Properties properties = new Properties();

            // Load existing properties
            try (FileInputStream fis = new FileInputStream(configFile)) {
                properties.load(fis);
            }

            // Update the required property
            properties.setProperty(key, newValue);

            // Save the updated properties back
            try (FileOutputStream fos = new FileOutputStream(configFile)) {
                properties.store(fos, "Updated property: " + key);
                System.out.println("Updated property: " + key + " = " + newValue);
            }

            // Reload the updated properties into the framework
            Runenvironment.getInstance(new FileInputStream(configFile), args);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Example usage
        String keyToUpdate = "cucumber.features"; // Update as per requirement
        String newValue = "src/test/resources/features/MyFeature.feature"; // Example new value

        updateRunConfig(args, keyToUpdate, newValue);
    }
}








import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.HSSFWorkbook; // For .xls format
import org.apache.poi.xssf.usermodel.XSSFWorkbook; // For .xlsx format
import java.io.*;

public class ExcelUpdateExistingXLS {
    public static void main(String[] args) {
        String inputFile = "data.xlsx";  // Source file (.xlsx)
        String outputFile = "existing_data.xls";  // Target file (.xls) to update
        int targetSheetIndex = 0;  // Sheet index in the existing .xls file
        int targetRowIndex = 1;  // Row index to update (0-based index)
        int targetCellIndex = 1;  // Column index to update (0-based index)

        try (FileInputStream fisXlsx = new FileInputStream(inputFile);
             Workbook xlsxWorkbook = new XSSFWorkbook(fisXlsx)) { // Read .xlsx file

            // Open the existing .xls file (handle cases where the file might not exist)
            File xlsFile = new File(outputFile);
            Workbook xlsWorkbook;
            
            if (xlsFile.exists()) {
                try (FileInputStream fisXls = new FileInputStream(xlsFile)) {
                    xlsWorkbook = new HSSFWorkbook(fisXls); // Read existing .xls file
                }
            } else {
                xlsWorkbook = new HSSFWorkbook(); // Create new .xls file if it doesn't exist
                xlsWorkbook.createSheet("Sheet1"); // Ensure at least one sheet exists
            }

            Sheet xlsxSheet = xlsxWorkbook.getSheetAt(0); // Read from .xlsx
            Sheet xlsSheet = xlsWorkbook.getSheetAt(targetSheetIndex); // Update .xls

            StringBuilder concatenatedValues = new StringBuilder();  // Store concatenated values

            for (Row row : xlsxSheet) {
                Cell flagCell = row.getCell(2); // "Flag" column (3rd column)
                Cell valueCell = row.getCell(1); // Column to concatenate (2nd column)

                if (row.getRowNum() > 0 && flagCell != null && flagCell.getCellType() == CellType.STRING
                        && "Yes".equalsIgnoreCase(flagCell.getStringCellValue().trim())
                        && valueCell != null && valueCell.getCellType() == CellType.STRING) {
                    
                    if (concatenatedValues.length() > 0) {
                        concatenatedValues.append(", ");  // Add separator
                    }
                    concatenatedValues.append(valueCell.getStringCellValue());  // Append value
                }
            }

            // Update the specified cell in the existing .xls file
            Row targetRow = xlsSheet.getRow(targetRowIndex);
            if (targetRow == null) {
                targetRow = xlsSheet.createRow(targetRowIndex); // Create row if it doesn't exist
            }
            Cell targetCell = targetRow.getCell(targetCellIndex);
            if (targetCell == null) {
                targetCell = targetRow.createCell(targetCellIndex); // Create cell if it doesn't exist
            }
            targetCell.setCellValue(concatenatedValues.toString()); // Update cell with concatenated values

            // Save updates to existing .xls file
            try (FileOutputStream fos = new FileOutputStream(outputFile)) {
                xlsWorkbook.write(fos);
                xlsWorkbook.close();  // Close workbook properly
                System.out.println("Updated existing Excel file successfully: " + outputFile);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



⁸8888⁸888888888888


import com.itextpdf.text.Document;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfSmartCopy;

import java.io.*;

public class PdfSplitter {

    private static final long MAX_SIZE_BYTES = 3 * 1024 * 1024; // 3MB

    public static void main(String[] args) throws Exception {
        String sourcePath = "source.pdf";
        String outputDir = "split_output/";
        splitPdfBySize(sourcePath, outputDir);
    }

    public static void splitPdfBySize(String sourcePath, String outputDir) throws Exception {
        PdfReader reader = new PdfReader(sourcePath);
        int totalPages = reader.getNumberOfPages();
        new File(outputDir).mkdirs();

        int partNumber = 1;
        int startPage = 1;

        while (startPage <= totalPages) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            Document document = new Document();
            PdfSmartCopy copy = new PdfSmartCopy(document, baos);
            document.open();

            for (int i = startPage; i <= totalPages; i++) {
                copy.addPage(copy.getImportedPage(reader, i));

                copy.flush();
                copy.freeReader(reader);

                // Temporarily close and check size
                document.close();
                long currentSize = baos.size();
                if (currentSize >= MAX_SIZE_BYTES) {
                    // Too large? Don't include current page in this split
                    baos.reset();
                    document = new Document();
                    copy = new PdfSmartCopy(document, baos);
                    document.open();
                    break;
                }

                startPage = i + 1;
            }

            // Save the part file
            String outputPath = outputDir + "part_" + partNumber + ".pdf";
            try (FileOutputStream fos = new FileOutputStream(outputPath)) {
                baos.writeTo(fos);
            }

            System.out.println("Created: " + outputPath);
            partNumber++;
        }

        reader.close();
    }
}


