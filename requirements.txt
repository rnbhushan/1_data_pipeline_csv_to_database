hipandas
sqlalchemy

@echo off
setlocal
set "folder=C:\path\to\your\folder"

if not exist "%folder%" (
    echo Folder does not exist.
    goto :EOF
)

pushd "%folder%" || (echo Failed to access folder & goto :EOF)

for /f "delims=" %%f in ('dir /b /a-d /o-d /t:w 2^>nul') do (
    echo Latest modified file: %%f
    goto :EOF
)

echo No files found in the folder.
popd



@echo off
setlocal
set "parentFolder=C:\path\to\your\folder"

if not exist "%parentFolder%" (
    echo Parent folder does not exist.
    cmd /k
    goto :EOF
)

pushd "%parentFolder%" || (echo Failed to access parent folder & cmd /k & goto :EOF)

for /f "delims=" %%d in ('dir /b /ad /o-d /t:w 2^>nul') do (
    set "latestFolder=%%d"
    goto :found
)

:found
if defined latestFolder (
    echo Latest modified subfolder: %latestFolder%
    REM Call the PowerShell script and pass the latestFolder as an argument
    PowerShell -ExecutionPolicy Bypass -File "C:\path\to\your\script.ps1" -Folder "%latestFolder%"
) else (
    echo No subfolders found in the parent folder.
)

popd
cmd /k



# Import the Selenium module
Import-Module Selenium

# Define the path to the Chrome WebDriver
$driverPath = "C:\Selenium\chromedriver.exe"

# Define the path to the HTML file you want to open
$htmlFilePath = "C:\path\to\your\file.html"

# Start a new Chrome browser instance
$chromeOptions = New-Object OpenQA.Selenium.Chrome.ChromeOptions
$chromeOptions.AddArgument('--headless') # Run Chrome in headless mode to avoid opening a visible window
$driver = Start-SeChrome -DriverPath $driverPath -Options $chromeOptions

# Convert the HTML file path to a URL format
$htmlFileUrl = "file:///" + $htmlFilePath.Replace("\", "/")

# Open the HTML file in the browser
$driver.Navigate().GoToUrl($htmlFileUrl)

# Wait for a few seconds to ensure the page is fully loaded
Start-Sleep -Seconds 2

# Take a screenshot and save it to a file
$screenshot = $driver.GetScreenshot()
$screenshot.SaveAsFile("C:\path\to\save\screenshot.png", [OpenQA.Selenium.ScreenshotImageFormat]::Png)

# Close the browser
$driver.Quit()

Write-Host "Screenshot saved successfully."

Ã³ooooooopo
@echo off
set "htmlFile=C:\path\to\your\file.html"
set "screenshotFile=C:\path\to\save\screenshot.png"

REM Using Chrome in headless mode to capture the screenshot
start /wait "" "C:\Program Files\Google\Chrome\Application\chrome.exe" --headless --screenshot="%screenshotFile%" --window-size=1280x1024 "%htmlFile%"

echo Screenshot saved to %screenshotFile%
pause
_______________

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Path to the screenshot image
$screenshotPath = "C:\path\to\save\screenshot.png"

# Load the image from file
$image = [System.Drawing.Image]::FromFile($screenshotPath)

# Create a bitmap object for the image
$bitmap = New-Object System.Drawing.Bitmap($image)

# Set the image to the clipboard
[System.Windows.Forms.Clipboard]::SetImage($bitmap)

Write-Host "Screenshot copied to clipboard."
_______

# Create an Outlook COM object
$Outlook = New-Object -ComObject Outlook.Application
$Mail = $Outlook.CreateItem(0)

# Set email properties (you can customize these)
$Mail.Subject = "Screenshot"
$Mail.To = "recipient@example.com"
$Mail.BodyFormat = 2  # HTML format

# Paste the clipboard content (image) into the email body
$Mail.Display()  # Open the email for editing
$Signature = $Mail.GetInspector.WordEditor
$Signature.Application.Selection.Paste()

Write-Host "Screenshot pasted in Outlook email body."
______
@echo off
set "htmlFile=C:\path\to\your\file.html"
set "screenshotFile=C:\path\to\save\screenshot.png"

REM Step 1: Take a screenshot using Chrome headless mode
start /wait "" "C:\Program Files\Google\Chrome\Application\chrome.exe" --headless --screenshot="%screenshotFile%" --window-size=1280x1024 "%htmlFile%"

REM Step 2: Copy the screenshot to clipboard using PowerShell
powershell -ExecutionPolicy Bypass -File "C:\path\to\your\copyToClipboard.ps1"

REM Step 3: Open Outlook and paste the screenshot into the body
powershell -ExecutionPolicy Bypass -File "C:\path\to\your\sendEmail.ps1"

pause







@echo off
setlocal

REM Function to find the latest modified subfolder
call :FindLatestModifiedSubfolder "C:\path\to\your\folder"
set "latestFolder=%ERRORLEVEL%"

REM Check if the function found a subfolder
if defined latestFolder (
    echo Latest modified subfolder: %latestFolder%
    REM Call the PowerShell script and pass the latestFolder as an argument
    PowerShell -ExecutionPolicy Bypass -File "C:\path\to\your\script.ps1" -Folder "%latestFolder%"
) else (
    echo No subfolders found in the parent folder.
)

exit /b

:FindLatestModifiedSubfolder
    setlocal
    set "parentFolder=%~1"
    
    if not exist "%parentFolder%" (
        echo Parent folder does not exist.
        endlocal
        exit /b 0
    )

    pushd "%parentFolder%" || (echo Failed to access parent folder & endlocal & exit /b 0)

    for /f "delims=" %%d in ('dir /b /ad /o-d /t:w 2^>nul') do (
        set "latestFolder=%%d"
        goto :found
    )

:found
    if defined latestFolder (
        echo %latestFolder% > latestFolder.txt
        endlocal & set latestFolder=%latestFolder% & exit /b 1
    ) else (
        echo No subfolders found.
        endlocal
        exit /b 0
    )

popd





_---------

# Define the search string
$searchString = "targetString"

# Read the entire file content as a single string
$fileContent = Get-Content -Path $filePath -Raw

# Use a regex pattern to search for the string and capture the next 20 characters
$pattern = [regex]::Escape($searchString) + ".{1,20}"

# Find all matches and iterate over them
[regex]::Matches($fileContent, $pattern) | ForEach-Object {
    $match = $_.Value
    $next20Chars = $match.Substring($searchString.Length)

    Write-Host "After '$searchString', the next 20 characters are: $next20Chars"
}

==============================================================


I want to flow the capture of screenshot runtime while i am doing operations on AUT for all pages in runtime
ChatGPT said:
ChatGPT
To capture screenshots at runtime while performing operations on the Application Under Test (AUT), you need to integrate the screenshot capture logic into your test automation framework so that every significant step or page navigation is documented automatically. Below is a guide to achieve this using Selenium WebDriver, Java, and iText for PDF report generation.

Overview:
Setup Listener or Utility to Capture Screenshots during specific actions (like page load or button click).
Generate PDF Report dynamically at runtime by appending screenshots and other test details.
Leverage Hooks in Test Frameworks like TestNG or JUnit to capture screenshots automatically during failures or specific checkpoints.
I'll show you how to integrate this into your automation framework step-by-step:

Step 1: Add Maven Dependencies
Add the necessary dependencies (iText and Selenium) to your pom.xml:

xml
Copy code
<dependency>
    <groupId>com.itextpdf</groupId>
    <artifactId>itextpdf</artifactId>
    <version>5.5.13.3</version>
</dependency>
<dependency>
    <groupId>org.seleniumhq.selenium</groupId>
    <artifactId>selenium-java</artifactId>
    <version>4.5.0</version>
</dependency>
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.8.0</version>
</dependency>
Step 2: Create Utility for Screenshot Capture
Create a utility method to capture screenshots at runtime:

java
Copy code
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;

public class ScreenshotUtil {

    public static String captureScreenshot(WebDriver driver) {
        // Format the file name with timestamp
        String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
        String screenshotPath = "screenshots/screenshot_" + timestamp + ".png";
        
        File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
        try {
            FileUtils.copyFile(screenshot, new File(screenshotPath));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return screenshotPath; // Return the file path for later use in PDF generation
    }
}
Step 3: Create the PDF Generation Utility
Create a utility to generate and append content to the PDF at runtime:

java
Copy code
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

import java.io.FileOutputStream;
import java.io.IOException;

public class PDFReportUtil {
    private Document document;
    private String pdfFilePath = "testReport.pdf";

    public PDFReportUtil() {
        document = new Document();
        try {
            PdfWriter.getInstance(document, new FileOutputStream(pdfFilePath));
            document.open();
            document.add(new Paragraph("Test Automation Report"));
            document.add(new Paragraph(" "));
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public void addTestStep(String testStepName, String testStatus, String actualValue, String expectedValue, String screenshotPath) {
        try {
            document.add(new Paragraph("Test Step: " + testStepName));
            document.add(new Paragraph("Status: " + testStatus));
            document.add(new Paragraph("Actual Value: " + actualValue));
            document.add(new Paragraph("Expected Value: " + expectedValue));
            document.add(new Paragraph(" "));

            if (screenshotPath != null) {
                Image screenshot = Image.getInstance(screenshotPath);
                screenshot.scaleToFit(500, 300);
                document.add(screenshot);
                document.add(new Paragraph(" "));
            }
        } catch (DocumentException | IOException e) {
            e.printStackTrace();
        }
    }

    public void closeDocument() {
        document.close();
    }
}
Step 4: Integrate Screenshot and PDF Generation in Test Code
Modify your test code to capture a screenshot at key points and append it to the PDF:

java
Copy code
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class TestAutomationWithPDFReport {
    public static void main(String[] args) {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");

        WebDriver driver = new ChromeDriver();
        PDFReportUtil pdfReport = new PDFReportUtil();

        try {
            driver.get("https://example.com");
            String screenshotPath = ScreenshotUtil.captureScreenshot(driver);
            pdfReport.addTestStep("Navigate to Home Page", "Pass", "Home Page Loaded", "Home Page Expected", screenshotPath);

            WebElement someElement = driver.findElement(By.id("someElementId"));
            someElement.click();
            screenshotPath = ScreenshotUtil.captureScreenshot(driver);
            pdfReport.addTestStep("Click on Some Element", "Pass", "Element Clicked", "Element Should Be Clicked", screenshotPath);

            // Add more steps as necessary
        } catch (Exception e) {
            e.printStackTrace();
            String screenshotPath = ScreenshotUtil.captureScreenshot(driver);
            pdfReport.addTestStep("Error Occurred", "Fail", e.getMessage(), "Expected Outcome", screenshotPath);
        } finally {
            driver.quit();
            pdfReport.closeDocument();
        }
    }
}
Step-by-Step Explanation:
Maven Dependencies:

iText for PDF generation.
Selenium for web automation.
Commons IO for handling file operations like copying screenshots.
Screenshot Utility (ScreenshotUtil):

Captures screenshots during runtime.
Generates unique file names using the current timestamp.
Returns the screenshot file path.
PDF Report Utility (PDFReportUtil):

Creates the PDF at the beginning of the test (pdfFilePath).
addTestStep() method to add details for each step, including the screenshot.
The closeDocument() method closes the document at the end.
Integration in Test Code (TestAutomationWithPDFReport):

The WebDriver instance interacts with the AUT.
After each significant action (driver.get(), someElement.click()), a screenshot is captured and appended to the PDF report.
In case of any exceptions, the catch block handles the failure scenario, captures a screenshot, and logs the details to the PDF.
Step 5: Organize Screenshots
To avoid cluttering, save screenshots in a dedicated folder (screenshots). This keeps the directory clean and organized. You can create the folder programmatically if it doesnât exist:

java
Copy code
new File("screenshots").mkdirs(); // Create the screenshots directory if it doesn't exist
Step 6: Adding Listeners for Automatic Capture (Optional)
You can also automate screenshot capture using TestNG Listeners, which can automatically trigger at certain events, like failures:

java
Copy code
import org.testng.ITestListener;
import org.testng.ITestResult;

public class TestListener implements ITestListener {

    @Override
    public void onTestFailure(ITestResult result) {
        WebDriver driver = ((TestAutomationWithPDFReport) result.getInstance()).getDriver();
        String screenshotPath = ScreenshotUtil.captureScreenshot(driver);
        PDFReportUtil pdfReport = ((TestAutomationWithPDFReport) result.getInstance()).getPdfReport();
        pdfReport.addTestStep("Test Failed: " + result.getName(), "Fail", "N/A", "N/A", screenshotPath);
    }
}
Summary:
Screenshot Utility: Captures a screenshot during every step of the test.
PDF Utility: Appends each step, including screenshots, to a PDF report.
Listeners (Optional): Automate the capturing process during failures or successes.
By following this approach, you'll be able to generate a comprehensive PDF report that documents the state of the AUT with screenshots taken in real-time as your test automation script runs through various pages and actions. This can be very helpful for debugging, reporting, and understanding the flow of your test cases.






public class ScreenshotUtil {

    public static String captureScreenshot() {
        String screenshotPath = null;
        try {
            // Capture the whole screen
            Robot robot = new Robot();
            String timestamp = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
            screenshotPath = "screenshots/screenshot_" + timestamp + ".png";

            // Get the screen dimensions
            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());

            // Take a screenshot
            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);

            // Save the screenshot as a PNG file
            ImageIO.write(screenFullImage, "png", new File(screenshotPath));
            
        } catch (AWTException | IOException e) {
            e.printStackTrace();
        }


=============================================

import java.util.ArrayList;
import java.util.List;

class EditableField {
    private int startRow;
    private int startCol;
    private int endCol;
    private String attachedText;

    public EditableField(int startRow, int startCol, int endCol, String attachedText) {
        this.startRow = startRow;
        this.startCol = startCol;
        this.endCol = endCol;
        this.attachedText = attachedText;
    }

    @Override
    public String toString() {
        return "EditableField{" +
                "startRow=" + startRow +
                ", startCol=" + startCol +
                ", endCol=" + endCol +
                ", attachedText='" + attachedText + '\'' +
                '}';
    }
}

public class MainframeScreenAutomation {

    // Simulated API call to get mainframe screen content
    private static String getScreenText(int row, int colStart, int colEnd) {
        // Replace with actual API call to get screen text
        return "Field Text"; // Simulated field text
    }

    public static List<EditableField> getEditableFields() {
        List<EditableField> editableFields = new ArrayList<>();
        int currentRow = 1; // Starting row position
        int currentCol = 1; // Starting column position

        // Simulated logic to find editable fields
        while (currentRow <= 24) { // Assuming 24 rows on the screen
            // Simulated logic for finding an editable field
            boolean isEditable = true; // Replace with actual logic to detect editable field
            int fieldStartCol = currentCol;
            int fieldEndCol = currentCol + 10; // Simulated field length

            if (isEditable) {
                String attachedText = getScreenText(currentRow, fieldStartCol, fieldEndCol);
                EditableField field = new EditableField(currentRow, fieldStartCol, fieldEndCol, attachedText);
                editableFields.add(field);
            }

            // Simulate moving to next editable field
            currentCol += 12;
            if (currentCol > 80) { // Assuming 80 columns per row
                currentCol = 1;
                currentRow++;
            }
        }
        return editableFields;
    }

    public static void main(String[] args) {
        List<EditableField> editableFields = getEditableFields();
        for (EditableField field : editableFields) {
            System.out.println(field);
        }
    }
}


        return screenshotPath; // Return the path for later use in PDF generation
    }
}



